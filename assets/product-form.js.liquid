if (!customElements.get('product-form')) {
  customElements.define(
    'product-form',
    class ProductForm extends HTMLElement {
      constructor() {
        super()

        this.form = this.querySelector('form')
        this.variantIdInput.disabled = false
        this.form.addEventListener('submit', this.onSubmitHandler.bind(this))
        this.cart =
          document.querySelector('cart-notification') ||
          document.querySelector('cart-drawer')
        this.submitButton = this.querySelector('[type="submit"]')
        this.submitButtonText = this.submitButton?.querySelector('span')

        if (document.querySelector('cart-drawer'))
          this.submitButton?.setAttribute('aria-haspopup', 'dialog')

        this.hideErrors = this.dataset.hideErrors === 'true'
      }

      onSubmitHandler(evt) {
        evt.preventDefault()
        if (this.submitButton?.getAttribute('aria-disabled') === 'true') return

        this.handleErrorMessage()

        this.submitButton?.setAttribute('aria-disabled', true)
        this.submitButton?.classList.add('loading')
        this.querySelector('.loading__spinner')?.classList.remove('hidden')

        const config = fetchConfig('javascript')
        config.headers['X-Requested-With'] = 'XMLHttpRequest'
        delete config.headers['Content-Type']

        const formData = new FormData(this.form)
        const bookingListContainer = document.getElementById(
          'booking-list-container'
        )

        if (
          bookingListContainer &&
          bookingListContainer.style.display !== 'none'
        ) {
          const activeLi = bookingListContainer.querySelector('ul li.active')

          if (activeLi) {
            const bookingId = activeLi.getAttribute('booking_id')
            formData.append('properties[booking_id]', bookingId)
          }
        }

        if (this.cart) {
          formData.append(
            'sections',
            this.cart.getSectionsToRender().map((section) => section.id)
          )
          formData.append('sections_url', window.location.pathname)
          this.cart.setActiveElement(document.activeElement)
        }
        config.body = formData

        fetch(`${routes.cart_add_url}`, config)
          .then((response) => response.json())
          .then((response) => {
            if (response.status) {
              publish(PUB_SUB_EVENTS.cartError, {
                source: 'product-form',
                productVariantId: formData.get('id'),
                errors: response.errors || response.description,
                message: response.message,
              })
              this.handleErrorMessage(response.description)

              const soldOutMessage =
                this.submitButton?.querySelector('.sold-out-message')
              if (!soldOutMessage) return
              this.submitButton?.setAttribute('aria-disabled', true)
              this.submitButtonText.classList.add('hidden')
              soldOutMessage.classList.remove('hidden')
              this.error = true
              return
            } else if (!this.cart) {
              window.location = window.routes.cart_url
              return
            }

            const startMarker = CartPerformance.createStartingMarker(
              'add:wait-for-subscribers'
            )
            if (!this.error)
              publish(PUB_SUB_EVENTS.cartUpdate, {
                source: 'product-form',
                productVariantId: formData.get('id'),
                cartData: response,
              }).then(() => {
                CartPerformance.measureFromMarker(
                  'add:wait-for-subscribers',
                  startMarker
                )
              })
            this.error = false
            const quickAddModal = this.closest('quick-add-modal')
            if (quickAddModal) {
              document.body.addEventListener(
                'modalClosed',
                () => {
                  setTimeout(() => {
                    CartPerformance.measure(
                      'add:paint-updated-sections',
                      () => {
                        this.cart.renderContents(response)
                      }
                    )
                  })
                },
                { once: true }
              )
              quickAddModal.hide(true)
            } else {
              CartPerformance.measure('add:paint-updated-sections', () => {
                this.cart.renderContents(response)
              })
            }
          })
          .catch((e) => {
            console.error(e)
          })
          .finally(() => {
            this.submitButton?.classList.remove('loading')
            if (this.cart && this.cart.classList.contains('is-empty'))
              this.cart.classList.remove('is-empty')
            if (!this.error) this.submitButton?.removeAttribute('aria-disabled')
            this.querySelector('.loading__spinner')?.classList.add('hidden')

            CartPerformance.measureFromEvent('add:user-action', evt)
          })
      }

      handleErrorMessage(errorMessage = false) {
        if (this.hideErrors) return

        this.errorMessageWrapper =
          this.errorMessageWrapper ||
          this.querySelector('.product-form__error-message-wrapper')
        if (!this.errorMessageWrapper) return
        this.errorMessage =
          this.errorMessage ||
          this.errorMessageWrapper.querySelector('.product-form__error-message')

        this.errorMessageWrapper.toggleAttribute('hidden', !errorMessage)

        if (errorMessage) {
          this.errorMessage.textContent = errorMessage
        }
      }

      toggleSubmitButton(disable = true, text) {
        if (disable) {
          this.submitButton?.setAttribute('disabled', 'disabled')
          if (text) this.submitButtonText.textContent = text
        } else {
          this.submitButton?.removeAttribute('disabled')
          this.submitButtonText.textContent = window.variantStrings.addToCart
        }
      }

      get variantIdInput() {
        return this.form.querySelector('[name=id]')
      }
    }
  )

  document.addEventListener('DOMContentLoaded', function () {
    const checkAvailabilityContainer = document.getElementById(
      'booking-form-container'
    )

    if (checkAvailabilityContainer) {
      const checkAvailabilityInput =
        checkAvailabilityContainer.querySelector('input')
      const checkAvailabilityBtn =
        checkAvailabilityContainer.querySelector('button')

      if (checkAvailabilityInput && checkAvailabilityBtn) {
        checkAvailabilityBtn.addEventListener('click', function () {
          if (!checkAvailabilityInput.value) {
            checkAvailabilityInput.focus()
            return
          }

          const bookingsListContainer = document.getElementById(
            'booking-list-container'
          )
          const bookingListContainerUl =
            bookingsListContainer.querySelector('ul')

          bookingListContainerUl.innerHTML = ''
          checkAvailabilityBtn.disabled = true

          fetch(
            `https://raizes-experience-backend.onrender.com/booking?start_datetime=${checkAvailabilityInput.value}&check_time=true`
          )
            .then((res) => {
              if (!res.ok) {
                console.error('Error when fetching bookings')
                return
              }

              return res.json()
            })
            .then((data) => {
              if (data && data.bookings) {
                bookingsListContainer.style.display = 'block'
                bookingListContainerUl.append(
                  ...data.bookings.map((booking, index) => {
                    const li = document.createElement('li')

                    if (index === 0) {
                      li.classList.add('active')
                    }

                    li.addEventListener('click', function () {
                      if (li.className !== 'active') {
                        const currentActive =
                          bookingListContainerUl.querySelector('li.active')

                        if (currentActive)
                          currentActive.classList.remove('active')

                        li.classList.add('active')

                        let bookingIdInput = document.querySelector(
                          'input[name="properties[booking_id]"]'
                        )

                        if (!bookingIdInput) {
                          bookingIdInput = document.createElement('input')
                          bookingIdInput.type = 'hidden'
                          bookingIdInput.name = 'properties[booking_id]'
                          document
                            .querySelector('form')
                            .appendChild(bookingIdInput)
                        }

                        bookingIdInput.value = li.getAttribute('booking_id')
                      }
                    })

                    li.setAttribute('booking_id', booking.id)
                    li.textContent = new Date(
                      booking.start_datetime
                    ).toLocaleTimeString([], {
                      hour: '2-digit',
                      minute: '2-digit',
                      hour12: false,
                    })

                    return li
                  })
                )
              }
            })
            .catch(console.error)
            .finally(() => {
              checkAvailabilityBtn.disabled = false
            })
        })
      }
    }
  })
}
